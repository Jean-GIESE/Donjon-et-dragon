@startuml
'https://plantuml.com/class-diagram
package "donjonDragon"
{
package "entite"
{
/'Définitions des classes'/
abstract Entite<<abstract>>
{
#m_pvMax : Integer
#m_pv : Integer
#m_force : Integer
#m_dexterite : Integer
#m_vitesse : Integer
#m_initiative : Integer
#m_enVie : Boolean
#m_pos : Integer[*]
#m_icone : String
#m_type : TypeEntite

+getPvMax():Integer
+getPv():Integer
+getForce():Integer
+getDexterite():Integer
+getVitesse():Integer
+getInitiative():Integer
+getClasseArmure():Integer {abstract}
+getNom():String {abstract}
+setPv(pv:Integer)
+setEnVie(vie:Boolean)
+attaquer(cible:Entite) {abstract}
+getType(): TypeEntite
+getIcone(): String
+setIcone(): String
+seDeplacer(donjon:Donjon,pos:Integer[*])
+equals(obj:Object): Boolean
+toString():String {abstract}

}
class Personnage
{
-m_nom : String
-m_race : Race
-m_classe : Classe
-m_inventaire:Equipement[*]
-m_arme : Arme
-m_armure : Armure

+«Create» Personnage(nom:String,classe:Classe,race:Race,pvMax:Integer,force:Integer,dexterite:Integer,vitesse:Integer,initiative:Integer): Personnage
+sEquiper(objet:Equipement): Void
+ramasser(): Void
+choisirEquipementDepart()
+getNom():String
+getRace():Race
+getClasse():Classe
+getInventaire():Equipement[*]
+getArme():Arme
+getArmure():Armure
+getClasseArmure():Integer
+attaquer(cible:Entite)
+toString():String

}
class Monstre
{
-m_espece : String
-m_numero : Integer
-m_degat : De
-m_portee : Integer
-m_classeArmure : Integer
+«Create» Monstre(espece:String,numero:Integer,degat:De,portee:Integer,pvMax:Integer,force:Integer,dexterite:Integer,vitesse:Integer,initiative:Integer,classeArmure:Integer,icone:String): Monstre
+getEspece():String
+getNumero():Integer
+getClasseArmure():Integer
+getNom():String
+attaquer(cible:Entite)
+toString():String

}
enum TypeEntite
{
JOUEUR
MONSTRE
AUCUN
}
package "classe"
{
abstract Classe<<abstract>>
{
-m_nom:String
-m_pv:Integer
-m_equipementDepart:Equipement

+«Create»Classe(nom:String,pv:Integer,equipementDepart:ArrayList<Equipement>): Classe
+getPv():Integer
+getEquipementDepart():ArrayList<Equipement>
+toString():String
}
class Clerc
{
+«Create» Clerc(): Clerc
+initialiserEquipementClerc(): ArrayList<Equipement>
}
class Guerrier
{
+«Create» Guerrier(): Guerrier
+initialiserEquipementGuerrier(): ArrayList<Equipement>
}
class Magicien
{
+«Create» Magicien(): Magicien
+initialiserEquipementMagicien(): ArrayList<Equipement>
}
class Roublard
{
+«Create» Roublard(): Roublard
+initialiserEquipementRoublard(): ArrayList<Equipement>
}
}

package "race"
{
/'Définitions des classes'/
abstract Race<<abstract>>
{
-m_pv : Integer
-m_force : Integer
-m_dexterite : Integer
-m_vitesse : Integer
-m_initiative : Integer
+«Create» Race(pv:Integer,force:Integer,dexterite:Integer,vitesse:Integer,initiative:Integer): Race
+getPv():Integer
+getForce():Integer
+getDexterite():Integer
+getVitesse():Integer
+getInitiative():Integer
+toString():String
}
class Elfe
{
+«Create» Elfe(): Elfe
}
class Humain
{
+«Create» Humain(): Humain
}
class Halfelin
{
+«Create» Halfelin(): Halfelin
}
class Nain
{
+«Create» Nain(): Nain
}
}

package "sort"
{
/'Définitions des sorts'/
interface Sort
{
+lancer(entites:Personnage[*],donjon:Donjon)
}
class ArmeMagique
{
+«Create» ArmeMagique(): ArmeMagique
+lancer(entites:Personnage[*],donjon:Donjon)
+listPerso(persos:Personnage[*])
+listArme(perso:Personnage,armeDispo:Arme[*])
}
class BoogieWoogie
{
+«Create» BoogieWoogie(): BoogieWoogie
+lancer(entites:Personnage[*],donjon:Donjon)
+coordonneCible(numCible:Integer,donjon:Donjon):Integer[*]
}
class Guerison
{
+«Create» Guerison(): Guerison
+lancer(entites:Personnage[*],donjon:Donjon)
+listPerso(persos:APersonnage[*])
}
}

/'Définitions des relations'/
Personnage -up-|> Entite
Monstre -up-|> Entite

Clerc -up-|> Classe
Guerrier -up-|> Classe
Magicien -up-|> Classe
Roublard -up-|> Classe

Elfe -up-|> Race
Humain -up-|> Race
Halfelin -up-|> Race
Nain -up-|> Race

Classe -> Equipement : «call»
Classe -> Arme : «call»
Classe -> Armure : «call»

Entite -> Donjon : «call»
Monstre -> De : «call»

Personnage -> De : «call»
Personnage -> Classe : «call»
Personnage -> Clerc : «call»
Personnage -> Classe : «call»
Personnage -> Guerrier : «call»
Personnage -> Magicien : «call»
Personnage -> Roublard : «call»
Personnage -> Elfe : «call»
Personnage -> Halfelin : «call»
Personnage -> Humain : «call»
Personnage -> Nain : «call»
Personnage -> Race : «call»
Personnage -> Equipement : «call»
Personnage -> Arme : «call»
Personnage -> Armure : «call»
Personnage -> Donjon : «call»

}
package "equipement"
{
/'Définitions des classes'/
abstract Equipement<<abstract>>
{
-m_nom:String
-m_lourd:Boolean

+«Create» Equipement(nom:String,est_lourd:Boolean,type:TypeEquipement): Equipement
+{abstract} copie():Equipement
+getNom():String
+getLourd():Boolean
+getType(): TypeEquipement
+toString():String
}
'--- Relations d'appel ---
Equipement .> Donjon : "«call»"
class Armure
{
-m_classeArmure:Integer
+«Create» Armure(nom:Integer,classeArmure:Integer,est_lourd:Boolean): Armure
+copie():Armure
+getClasse():Integer
}
'--- Relations d'appel ---
Armure .> Equipement : "«call»"
class Arme
{
-m_portee:Integer
-m_bonus:Integer
+«Create» Armure(nom:String,degat:De,portee:Integer,est_lourd:Boolean): Armure
+copie():Arme
+getDegat():De
+getPortee():Integer
+getBonus():Integer
+setM_bonus(bonus:Integer)
}
'--- Relations d'appel ---
Arme .> Equipement : "«call»"
Arme .> De : "«call»"
/'Définitions des relations'/
Armure -up-|> Equipement
Arme -up-|> Equipement
enum TypeEquipement {
ARME
ARMURE
AUCUN
}
}
package "plateau"
{
/'Définitions des classes'/
class Donjon
{
-m_taille:Integer
-m_tailleX:Integer
-m_tailleY:Integer
-m_carteAffiche:AffichageDonjon
+«Create» Donjon(): Donjon
+«Create» Donjon(tailleX:Integer,tailleY:Integer): Donjon
+creerCarte(axe:String):Integer
+tailleMax():Integer
+initialiserCarte():Position[*][*]
+cordonneX(lettreX:char):Integer
+cordonneValide(coordX:Integer,coordY:Integer):Booleans
+placerObstacle()
+placerEntite(entite:Entite)
+placerEquipement(objet:Equipement)
+donjonDefaut(persos:Personnage[*],objets:Equipement[*],monstres:Monstre[*])
+getCarte():Position[*][*]
+getTailleX():Integer
+getTailleY():Integer
+getTaille():Integer
+getMonstres():ArrayList<Monstre>
+creerMonstre()
+addMonstres(monstre:Monstre)
+trouverPositionEntite(entite:Entite):Integer[*]
+deplacementEntite(entite:Entite,pos:Integer[*]):Boolean
+afficherCarte()
+attaquerEntite(acteur:Entite,cible:Entite):Boolean
+attaquerEntiteMJ(position:Position,degat:De):Boolean
+deplacementEntiteMJ(positionEntite:Position):Boolean
}
/'Définitions des relations'/
'--- Relations d'appel ---
Donjon .> Entite : "«call»"
Donjon .> Equipement : "«call»"
Donjon .> Monstre : "«call»"
Donjon .> Personnage : "«call»"

'--- Agrégations ---
Donjon "1" o--> "0..*\n-m_monstres" Monstre : contient

class AffichageDonjon
{
-m_scanner:Scanner
-m_carte:Position[*][*]

+«Create» AffichageDonjon(carte:Position[][]): AffichageDonjon
+mauvaiseDimension()
+mauvaisFormat()
+dimensionCarte(axe:String):Integer
+coordonneObstacle():String
+coordonneCombattant(nomEntite:String):String
+coordonneEquipement(objet:String): String
+nombreMonstres(taille:Integer):Integer
+mauvaisNbMonstres()
+especeMonstres(numMonstre:Integer): String
+degatsMonstre():Integer[*]
+nombreInsuffisant()
+nombreSuperieurEgalZero()
+nombreInsuffisantAttaque()
+porteeMonstre():Integer
+pvMonstre():Integer
+forceMonstre():Integer
+dexteriteMonstre():Integer
+vitesseMonstre():Integer
+initiativeMonstre():Integer
+classeArmureMonstre():Integer
+iconeMonstre():String
+mauvaisIcone()
+afficherCarte(donjon:Position[*][*],tailleX:Integer,tailleY:Integer)
}
class Position
{
-m_obstacle:Boolean
-m_typeEquipement:TypeEquipement
-m_typeEntite:TypeEntite
-m_equipement:Equipement
-m_entite:Entite
-m_icone:String

+«Create» Position():Position
+getObstacle():Boolean
+getTypeEquipement():TypeEquipement
+getTypeEntite():TypeEntite
+getEntite():Entite
+getEquipement():Equipement
+getIcone():String
+setIcone(icone:String)
+setTypeEntite(entite:TypeEntite)
+setTypeEquipement(equipement:TypeEquipement)
+setObstacle(obstacle:Boolean)
+placerEquipement(equipement:Equipement)
+placerEntite(entite:Entite)
+enleverEquipement()
+enleverEntite()
+miseAJourIcone()
+estVide()
+aJusteEquipement()
+toString():String
}
}
class De
{
-m_nombre:Integer
-m_face:Integer
-m_scanner:Scanner
+«Create» De(nombre:Integer,face:Integer): De
+lancer():Integer
+toString():String
}
class Jeu
{
-m_donjons : Donjon[*]
-m_donjonActuel : int
-m_joueurs : Personnage[*]
-m_scanner : Scanner

+«Create» Jeu() : Jeu
+lancerPartie() : void
+proposerMiseEnPlace(donjon : Donjon) : void
+calculerInitiative(donjon : Donjon) : Entite[*]
+gererTourPersonnage(joueur : Personnage, donjon : Donjon) : void
+gererTourMonstre(monstre : Monstre, donjon : Donjon) : void
+donjonEstTermine(donjon : Donjon) : boolean
+restaurerVieJoueurs() : void
+auMoinsUnJoueurMort() : boolean
+afficherDefaite() : void
+afficherVictoire() : void
}
/'Définitions des relations'/
' --- Relations d'appel ---
Jeu .> Donjon : "«call»"
Jeu .> Personnage : "«call»"
Jeu .> Monstre : "«call»"
Jeu .> Entite : "«call»"
Jeu .> Armure : "«call»"
Jeu .> Arme : "«call»"
Jeu .> Scanner : "«call»"
Jeu .> De : "«call»"

' --- Relations d'instanciation ---
Jeu .> Donjon : "«instantiate»"
Jeu .> Armure : "«instantiate»"
Jeu .> Arme : "«instantiate»"
Jeu .> Monstre : "«instantiate»"
Jeu .> De : "«instantiate»"
Jeu .> Scanner : "«instantiate»"

' --- Agrégations ---
Jeu "1" *--> "3\n-m_donjons" Donjon : contient
Jeu "1" o--> "1..*\n-m_joueurs" Personnage : se joue avec
}

@enduml
